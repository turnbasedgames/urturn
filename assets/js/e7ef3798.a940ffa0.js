"use strict";(self.webpackChunk_urturn_docs=self.webpackChunk_urturn_docs||[]).push([[7740],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9398:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7378),r=n(8944);const o="tabItem_wHwb";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},6262:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(5773),r=n(7378),o=n(8944),i=n(6457),l=n(784),s=n(9947),u=n(3457);const c="tabList_J5MA",p="tabItem_l0OV";function m(e){var t;const{lazy:n,block:i,defaultValue:m,values:d,groupId:h,className:g}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=d??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,l.l)(y,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===m?m:m??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==k&&!y.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:w}=(0,s.U)(),[T,N]=(0,r.useState)(k),j=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=h){const e=b[h];null!=e&&e!==T&&y.some((t=>t.value===e))&&N(e)}const C=e=>{const t=e.currentTarget,n=j.indexOf(t),a=y[n].value;a!==T&&(O(t),N(a),null!=h&&w(h,String(a)))},S=e=>{var t;let n=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const t=j.indexOf(e.currentTarget)+1;n=j[t]??j[0];break}case"ArrowLeft":{const t=j.indexOf(e.currentTarget)-1;n=j[t]??j[j.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},g)},y.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>j.push(e),onKeyDown:S,onClick:C},i,{className:(0,o.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function d(e){const t=(0,i.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},9406:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=n(5773),r=(n(7378),n(5318)),o=n(6262),i=n(9398);const l={description:"Create multiplayer Chess using open source chess packages",tags:["advanced","tutorial","chess"]},s="Chess Tutorial",u={unversionedId:"Getting-Started/chess",id:"Getting-Started/chess",title:"Chess Tutorial",description:"Create multiplayer Chess using open source chess packages",source:"@site/docs/1-Getting-Started/2-chess.md",sourceDirName:"1-Getting-Started",slug:"/Getting-Started/chess",permalink:"/docs/Getting-Started/chess",draft:!1,editUrl:"https://github.com/turnbasedgames/urturn/tree/main/docs/docs/1-Getting-Started/2-chess.md",tags:[{label:"advanced",permalink:"/docs/tags/advanced"},{label:"tutorial",permalink:"/docs/tags/tutorial"},{label:"chess",permalink:"/docs/tags/chess"}],version:"current",sidebarPosition:2,frontMatter:{description:"Create multiplayer Chess using open source chess packages",tags:["advanced","tutorial","chess"]},sidebar:"docs",previous:{title:"TicTacToe Tutorial",permalink:"/docs/Getting-Started/tictactoe"},next:{title:"Deploying your game",permalink:"/docs/Getting-Started/deploying-your-game"}},c={},p=[{value:"What you are making",id:"what-you-are-making",level:2},{value:"Setup",id:"setup",level:2},{value:"Defining Initial State",id:"defining-initial-state",level:3},{value:"Players joining",id:"players-joining",level:3},{value:"Players quitting",id:"players-quitting",level:3},{value:"Players making chess moves",id:"players-making-chess-moves",level:3},{value:"What&#39;s Next?",id:"whats-next",level:2},{value:"Stretch goal",id:"stretch-goal",level:3}],m={toc:p};function d(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"chess-tutorial"},"Chess Tutorial"),(0,r.kt)("h2",{id:"what-you-are-making"},"What you are making"),(0,r.kt)("p",null,"You can play the final version ",(0,r.kt)("a",{parentName:"p",href:"https://www.urturn.app/play/chess"},"here"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Chess Final",src:n(2301).Z,width:"1203",height:"585"})),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This is an ",(0,r.kt)("strong",{parentName:"p"},"advanced tutorial")," so it will move fast."),(0,r.kt)("p",{parentName:"admonition"},"We expect you to have a basic understanding what ",(0,r.kt)("a",{parentName:"p",href:"/docs"},"UrTurn is"),".")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Generate the chess tutorial locally:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx @urturn/runner init --tutorial chess # answer prompts\ncd chess\n")),(0,r.kt)("p",null,"The UI is provided for you. Your goal is to implement the underlying logic (",(0,r.kt)("a",{parentName:"p",href:"/docs/API/room-functions"},"room functions"),") which determine the resulting state after any event (e.g. player move, joins, etc.)."),(0,r.kt)("h3",{id:"defining-initial-state"},"Defining Initial State"),(0,r.kt)("p",null,"We've already defined the initial state in ",(0,r.kt)("inlineCode",{parentName:"p"},"onRoomStart"),". These values are understood and acted upon by the frontend provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "state": {\n    // simple map of plrId to the color they are playing as "white" or "black"\n    "plrIdToColor": {},\n    // string representation of the board https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation\n    "fen": null,\n    // player JSON object that won the game\n    "winner": null,\n    // the string representation of a location on the board of the\n    // final position of the last moved piece (e.g. "e4")\n    "lastMovedSquare": null,\n  },\n}\n')),(0,r.kt)("p",null,"Your goal is to define the other 3 functions ",(0,r.kt)("inlineCode",{parentName:"p"},"onPlayerJoin"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onPlayerMove"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onPlayerQuit")," for a fully functioning chess game. Fortunately, the fundamental chess logic has been implemented for us with the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/chess.js"},"chess.js package"),"."),(0,r.kt)("h3",{id:"players-joining"},"Players joining"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"initial",label:"TODO",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerJoin(player, roomState) {\n  // TODO: implement what to do when player joins game\n  return {}\n}\n"))),(0,r.kt)(i.Z,{value:"solution",label:"onPlayerJoin Solution",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerJoin(player, roomState) {\n  const { players, state } = roomState;\n  if (players.length === 2) {\n    const game = new Chess();\n    state.fen = game.fen();\n    state.plrIdToColor[players[1].id] = Color.Black;\n    return { joinable: false, state };\n  }\n\n  // default first player to white to simplify\n  state.plrIdToColor[players[0].id] = Color.White;\n  return { state };\n}\n")))),(0,r.kt)("h3",{id:"players-quitting"},"Players quitting"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"initial",label:"TODO",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerQuit() {\n  // TODO: handle when player quits the game before it finishes\n  return {};\n}\n"))),(0,r.kt)(i.Z,{value:"solution",label:"onPlayerQuit Solution",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerQuit(player, roomState) {\n  const { state, players } = roomState;\n  if (players.length === 1) {\n    const [winner] = players;\n    state.winner = winner;\n    return { state, finished: true };\n  }\n  return { joinable: false, finished: true };\n}\n")))),(0,r.kt)("h3",{id:"players-making-chess-moves"},"Players making chess moves"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"initial",label:"TODO",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerMove() {\n  // TODO: handle when player quits the game before it finishes\n  return {};\n}\n"))),(0,r.kt)(i.Z,{value:"solution",label:"onPlayerMove Solution",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerMove(player, chess, roomState) {\n  const { state } = roomState;\n  const { fen } = state;\n  if (fen == null) {\n    throw new Error('Still waiting on another player!');\n  }\n  const game = new Chess(fen);\n  const turnColor = game.turn() === 'w' ? Color.White : Color.Black;\n  if (turnColor !== state.plrIdToColor[player.id]) {\n    throw new Error('It is not your turn!');\n  }\n  const result = game.move(move);\n  if (result == null) {\n    throw new Error('Invalid chess move!');\n  }\n  state.fen = game.fen();\n  state.lastMovedSquare = move;\n\n  if (game.isGameOver()) {\n    if (game.isCheckmate()) {\n      state.winner = player;\n    }\n    return { state, finished: true };\n  }\n\n  return { state };\n}\n")))),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("p",{parentName:"admonition"},"That's it! Now we have a chess game that properly handles validation of player moves, and updating the state based on player moves.")),(0,r.kt)("h2",{id:"whats-next"},"What's Next?"),(0,r.kt)("p",null,"You can ",(0,r.kt)("a",{parentName:"p",href:"/docs/Getting-Started/deploying-your-game"},(0,r.kt)("strong",{parentName:"a"},"deploy"))," your game to UrTurn in a couple of minutes! Immediately play with random people, or create private rooms and play with close friends!"),(0,r.kt)("h3",{id:"stretch-goal"},"Stretch goal"),(0,r.kt)("p",null,"Try implementing the classic chess move timers with ",(0,r.kt)("inlineCode",{parentName:"p"},"client.now()"),". The idea is that clients initiate a ",(0,r.kt)("inlineCode",{parentName:"p"},"client.makeMove()")," call when they detect the game to be finished and the ",(0,r.kt)("inlineCode",{parentName:"p"},"onPlayerMove")," function validates this request."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Read more about ",(0,r.kt)("a",{parentName:"p",href:"/docs/Advanced/timer-triggers"},"server side timers"),", which will make this much easier.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Tutorial with chess move timers is coming soon. Join our ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/myWacjdb5S"},"Discord")," to learn more about it.")))}d.isMDXComponent=!0},2301:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/final-chess-a2010d97c78989e9d145cb36d6e709be.gif"}}]);