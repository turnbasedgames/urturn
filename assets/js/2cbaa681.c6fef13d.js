"use strict";(self.webpackChunk_urturn_docs=self.webpackChunk_urturn_docs||[]).push([[9507],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),c=r,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9398:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7378),r=n(8944);const i="tabItem_wHwb";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},6262:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(5773),r=n(7378),i=n(8944),o=n(6457),l=n(784),s=n(9947),u=n(3457);const p="tabList_J5MA",m="tabItem_l0OV";function d(e){var t;const{lazy:n,block:o,defaultValue:d,values:c,groupId:h,className:g}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=c??y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,l.l)(k,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===d?d:d??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==v&&!k.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:b}=(0,s.U)(),[T,N]=(0,r.useState)(v),O=[],{blockElementScrollPositionUntilNextRender:j}=(0,u.o5)();if(null!=h){const e=w[h];null!=e&&e!==T&&k.some((t=>t.value===e))&&N(e)}const P=e=>{const t=e.currentTarget,n=O.indexOf(t),a=k[n].value;a!==T&&(j(t),N(a),null!=h&&b(h,String(a)))},I=e=>{var t;let n=null;switch(e.key){case"Enter":P(e);break;case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]??O[O.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},g)},k.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>O.push(e),onKeyDown:I,onClick:P},o,{className:(0,i.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,r.cloneElement)(y.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function c(e){const t=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},5917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var a=n(5773),r=(n(7378),n(5318)),i=n(6262),o=n(9398);const l={description:"Create multiplayer TicTacToe to be played with anyone",tags:["beginner","tutorial","tictactoe"]},s="TicTacToe Tutorial",u={unversionedId:"Getting-Started/tictactoe",id:"Getting-Started/tictactoe",title:"TicTacToe Tutorial",description:"Create multiplayer TicTacToe to be played with anyone",source:"@site/docs/1-Getting-Started/1-tictactoe.md",sourceDirName:"1-Getting-Started",slug:"/Getting-Started/tictactoe",permalink:"/docs/Getting-Started/tictactoe",draft:!1,editUrl:"https://github.com/turnbasedgames/urturn/tree/main/docs/docs/1-Getting-Started/1-tictactoe.md",tags:[{label:"beginner",permalink:"/docs/tags/beginner"},{label:"tutorial",permalink:"/docs/tags/tutorial"},{label:"tictactoe",permalink:"/docs/tags/tictactoe"}],version:"current",sidebarPosition:1,frontMatter:{description:"Create multiplayer TicTacToe to be played with anyone",tags:["beginner","tutorial","tictactoe"]},sidebar:"docs",previous:{title:"Generate a Game",permalink:"/docs/Getting-Started/runner-init"},next:{title:"Chess Tutorial",permalink:"/docs/Getting-Started/chess"}},p={},m=[{value:"What you are making",id:"what-you-are-making",level:2},{value:"Setup",id:"setup",level:2},{value:"File/Folder structure",id:"filefolder-structure",level:3},{value:"Defining how state changes",id:"defining-how-state-changes",level:2},{value:"Initializing state",id:"initializing-state",level:3},{value:"Players joining",id:"players-joining",level:3},{value:"Players leaving",id:"players-leaving",level:3},{value:"Helper functions",id:"helper-functions",level:3},{value:"Player Moves",id:"player-moves",level:3},{value:"What&#39;s Next?",id:"whats-next",level:2}],d={toc:m};function c(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tictactoe-tutorial"},"TicTacToe Tutorial"),(0,r.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/fvxjN95-BgI",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,r.kt)("h2",{id:"what-you-are-making"},"What you are making"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"TicTacToe Final",src:n(8529).Z,width:"1909",height:"696"})),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("p",{parentName:"admonition"},"Play the final ",(0,r.kt)("a",{parentName:"p",href:"https://www.urturn.app/games/626eac7c65667f00160a6b42"},"version"),". Playing the game will help you envision what the underlying logic will look like."),(0,r.kt)("p",{parentName:"admonition"},"Ask yourself:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"How do you define what happens when a player moves?"),(0,r.kt)("li",{parentName:"ul"},"How can you tell if a player won the game?"))),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Generate the tictactoe tutorial locally:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx @urturn/runner init --tutorial first-game # answer prompts\ncd first-game\n")),(0,r.kt)("p",null,"The UI is provided for you. Your goal is to implement the underlying logic (",(0,r.kt)("a",{parentName:"p",href:"/docs/API/room-functions"},"room functions"),") which determine the resulting state after any event (e.g. player move, joins, etc.)."),(0,r.kt)("h3",{id:"filefolder-structure"},"File/Folder structure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"game\n\u2514\u2500\u2500\u2500src # room logic goes here\n\u2502   \u2502   main.js # room functions (e.g. onRoomStart, onPlayerMove, etc.)\n|   |   util.js # helper functions (e.g. evaluateBoard)\n\u2502   \n\u2514\u2500\u2500\u2500frontend # Tictactoe UI code lives here\n|   \u2502   ...frontend files\n|   ...other files # not important for this tutorial\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"There are several ",(0,r.kt)("inlineCode",{parentName:"p"},"// TODO:")," statements scattered across the files, ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main.js")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"src/util.js"),", to help guide you.")),(0,r.kt)("h2",{id:"defining-how-state-changes"},"Defining how state changes"),(0,r.kt)("p",null,"Start up the game and play around."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/runner"},"runner")," will immediately open a new window."),(0,r.kt)("p",{parentName:"admonition"},"You will see a console that let's you easily debug/inspect the global state of your game."),(0,r.kt)("p",{parentName:"admonition"},"You will also notice that if you ",(0,r.kt)("inlineCode",{parentName:"p"},"add"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"remove")," a player or try to make a ",(0,r.kt)("inlineCode",{parentName:"p"},"move")," on the tictactoe board, none of the state will change. So let's fix that!")),(0,r.kt)("h3",{id:"initializing-state"},"Initializing state"),(0,r.kt)("p",null,"We need to define what the ",(0,r.kt)("strong",{parentName:"p"},"initial state")," of the room looks like."),(0,r.kt)("p",null,"All state related to a room is held within the ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/types#roomstate"},"RoomState"),". We modify this object by returning the ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/types#roomstateresult"},"RoomStateResult"),"."),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("p",{parentName:"admonition"},"The runner will automatically hot reload changes when ",(0,r.kt)("strong",{parentName:"p"},"make changes")," and ",(0,r.kt)("strong",{parentName:"p"},"save"))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Now, modify the ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/room-functions#onroomstart-required"},(0,r.kt)("inlineCode",{parentName:"a"},"onRoomStart"))," function."),(0,r.kt)("p",{parentName:"admonition"},"Implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"TODO")," statements in ",(0,r.kt)("inlineCode",{parentName:"p"},"onRoomStart")," in the file ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main.js"),", and then check your work with the solution.")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"initial",label:"TODO",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onRoomStart() {\n  /**\n  // highlight-start\n    * TODO: define the fields:\n    * state.status (hint: use Status enum)\n    * state.plrIdToPlrMark\n    * state.plrMoveIndex\n    * state.board\n    * state.winner\n  // highlight-end\n  */\n  const state = {};\n  return { state };\n}\n"))),(0,r.kt)(o.Z,{value:"solution",label:"onRoomStart Solution",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onRoomStart() {\n  return {\n    state: {\n      // highlight-start\n      status: Status.PreGame,\n      plrIdToPlrMark: {}, // map from plrId to their mark (X or O)\n      plrMoveIndex: 0, // track who's move it is\n      board: [\n        [null, null, null],\n        [null, null, null],\n        [null, null, null],\n      ],\n      winner: null,\n      // highlight-end\n    },\n  };\n}\n")))),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("p",{parentName:"admonition"},"You should see your modifications to the initial state show up in the console!")),(0,r.kt)("h3",{id:"players-joining"},"Players joining"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Modify the ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/room-functions#onplayerjoin-required"},(0,r.kt)("inlineCode",{parentName:"a"},"onPlayerJoin"))," function to handle when a player joins."),(0,r.kt)("p",{parentName:"admonition"},"Implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"TODO")," statements in ",(0,r.kt)("inlineCode",{parentName:"p"},"onPlayerJoin"),", and then check your work with the solution.")),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("p",{parentName:"admonition"},"While implementing, try adding players. Try adding 3 players to see what happens.")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"initial",label:"TODO",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerJoin(player, roomState) {\n  const { players, state } = roomState;\n  if (players.length === 2) { // enough players to play the game\n    // highlight-next-line\n    // TODO: modify state to start the game\n    return {\n      // highlight-start\n      // TODO: tell UrTurn to NOT allow anymore players in this room\n      // TODO: return the modified state\n      // highlight-end\n    };\n  }\n\n  // still waiting on another player so make no modifications\n  return {};\n}\n"))),(0,r.kt)(o.Z,{value:"solution",label:"onPlayerJoin Solution",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerJoin(player, roomState) {\n  const { players, state } = roomState;\n  if (players.length === 2) { // enough players to play the game\n    // start the game and set the player's marks\n    // highlight-start\n    state.status = Status.InGame;\n    state.plrIdToPlrMark[players[0].id] = Mark.X;\n    state.plrIdToPlrMark[players[1].id] = Mark.O;\n    // highlight-end\n    // return modifications we want to make to the roomState\n    return {\n      // highlight-start\n      state,\n      // tell UrTurn to NOT allow anymore players in this room\n      joinable: false,\n      // highlight-end\n    };\n  }\n\n  // still waiting on another player so make no modifications\n  return {};\n}\n")))),(0,r.kt)("h3",{id:"players-leaving"},"Players leaving"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Modify the ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/room-functions#onplayerquit-required"},(0,r.kt)("inlineCode",{parentName:"a"},"onPlayerQuit"))," function to handle when a player quits."),(0,r.kt)("p",{parentName:"admonition"},"Implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"TODO")," statements in ",(0,r.kt)("inlineCode",{parentName:"p"},"onPlayerQuit"),", and then check your work with the solution.")),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("p",{parentName:"admonition"},"While implementing, try adding players and then removing them. Does the console show the state you expect?")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"initial",label:"TODO",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerQuit(player, roomState) {\n  const { state, players } = roomState;\n\n  state.status = Status.EndGame;\n  if (players.length === 1) {\n    // highlight-start\n    // TODO: when a player quits and there is another player, we should default the winner to\n    // be the remaining player\n    // highlight-end\n    return {\n      // highlight-start\n      // TODO: properly tell UrTurn the room is over\n      // (hint: modify finished, state fields)\n      // highlight-end\n    };\n  }\n  return {\n    // highlight-start\n    // TODO: when a player quits and there was no other player, there is no winner but we should\n    // properly tell UrTurn the room is over\n    // (hint: modify finished)\n    // highlight-end\n  };\n}\n"))),(0,r.kt)(o.Z,{value:"solution",label:"onPlayerQuit Solution",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerQuit(player, roomState) {\n  const { state, players } = roomState;\n  state.status = Status.EndGame;\n  if (players.length === 1) {\n    // highlight-start\n    const [winner] = players;\n    state.winner = winner;\n    return { state, finished: true };\n    // highlight-end\n  }\n  // highlight-next-line\n  return { state, joinable: false, finished: true };\n}\n")))),(0,r.kt)("h3",{id:"helper-functions"},"Helper functions"),(0,r.kt)("p",null,"Before we approach handling player moves, let's implement the helper function ",(0,r.kt)("inlineCode",{parentName:"p"},"evaluateBoard")," for determining if the game is finished and who won."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"TODO")," statements in ",(0,r.kt)("inlineCode",{parentName:"p"},"evaluateBoard"),", and then check your work with the solution."),(0,r.kt)("p",{parentName:"admonition"},"Read the doc string for the function to understand what we should return!")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"There are many ways to implement tictactoe evaluation logic, so don't be discouraged if your implementation doesn't look exactly like ours.")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"initial",label:"TODO",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/util.js"',title:'"src/util.js"'},"export const evaluateBoard = (board, plrIdToPlrMark, players) => {\n  // highlight-start\n  /**\n   * TODO: check for a winner (hint: make sure the mark is not null)\n   * - check rows\n   * - check columns\n   * - check diagonals\n   */\n\n  // TODO: check for tie and return correct result\n\n  // TODO: return default not finished\n  // highlight-end\n};\n"))),(0,r.kt)(o.Z,{value:"solution",label:"evaluateBoard Solution",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/util.js"',title:'"src/util.js"'},"export const evaluateBoard = (board, plrIdToPlrMark, players) => {\n  // calculate markToPlr map\n  const [XPlayer, OPlayer] = plrIdToPlrMark[players[0].id] === Mark.X ? players : players.reverse();\n  const markToPlr = {\n    [Mark.X]: XPlayer,\n    [Mark.O]: OPlayer,\n  };\n\n  // highlight-start\n  const winningLine = [ // all possible lines to check\n    // rows\n    [[0, 0], [0, 1], [0, 2]],\n    [[1, 0], [1, 1], [1, 2]],\n    [[2, 0], [2, 1], [2, 2]],\n    // columns\n    [[0, 0], [1, 0], [2, 0]],\n    [[0, 1], [1, 1], [2, 1]],\n    [[0, 2], [1, 2], [2, 2]],\n    // diagonals\n    [[0, 0], [1, 1], [2, 2]],\n    [[2, 0], [1, 1], [0, 2]],\n  ].find((indexes) => { // find the first line that has 3-in-a-row\n    const [[firstI, firstJ]] = indexes;\n    const firstMark = board[firstI][firstJ];\n    const isSame = indexes.every(([i, j]) => board[i][j] === firstMark);\n    return firstMark != null && isSame;\n  });\n\n  if (winningLine != null) { // winning line was found\n    const [i, j] = winningLine[0];\n    const mark = board[i][j];\n    return { finished: true, winner: markToPlr[mark] };\n  }\n\n  // check for tie\n  if (!board.some((row) => row.some((mark) => mark === null))) {\n    return {\n      finished: true,\n      tie: true,\n    };\n  }\n\n  return { finished: false };\n  // highlight-end\n};\n")))),(0,r.kt)("h3",{id:"player-moves"},"Player Moves"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"TODO")," statements in ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/room-functions#onplayermove-required"},(0,r.kt)("inlineCode",{parentName:"a"},"onPlayerMove")),", and then check your work with the solution.")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"initial",label:"TODO",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerMove(player, move, roomState) {\n  const { state, players, logger } = roomState;\n  const { plrMoveIndex, plrIdToPlrMark } = state;\n  const { x, y } = move;\n  // highlight-start\n  // TODO: validate player move and throw sensible error messages\n  // 1. what if a player tries to make a move when the game hasn't started?\n  // 2. what if a player makes a move and its not their turn?\n  // 3. what if a player makes a move on the board where there was already a mark?\n  // TODO: mark the board\n  // highlight-end\n\n  // check if the game is finished\n  const result = evaluateBoard(state.board, plrIdToPlrMark, players);\n  if (result?.finished) {\n    // highlight-start\n    // TODO: handle different cases when game is finished, using the values calculated from\n    // evaluateBoard() call\n    // hint: winner is Player type (not string)\n    return {\n      // TODO: include state modifications so UrTurn updates the state\n      // TODO: tell UrTurn that the room is finished, which lets UrTurn display the room correctly\n    };\n    // highlight-end\n  }\n\n  // highlight-next-line\n  // TODO: Set the plr to move to the next player (hint: update state.plrMoveIndex)\n  return { state };\n}\n"))),(0,r.kt)(o.Z,{value:"solution",label:"onPlayerMove Solution",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/main.js"',title:'"src/main.js"'},"function onPlayerMove(player, move, roomState) {\n  const { state, players } = roomState;\n  const { plrMoveIndex, plrIdToPlrMark } = state;\n  const { x, y } = move;\n\n  // highlight-start\n  // validate player moves\n  if (state.status !== Status.InGame) {\n    throw new Error(\"game is not in progress, can't make move!\");\n  }\n  if (players[plrMoveIndex].id !== player.id) {\n    throw new Error(`Its not this player's turn: ${player.username}`);\n  }\n  if (state.board[x][y] !== null) {\n    throw new Error(`Invalid move, someone already marked here: ${x},${y}`);\n  }\n  // highlight-end\n\n  // highlight-start\n  // mark the board\n  state.board[x][y] = plrIdToPlrMark[player.id];\n  // highlight-end\n\n  // check if the game is finished\n  const { winner, tie, finished } = evaluateBoard(state.board, plrIdToPlrMark, players);\n  if (finished) {\n    // highlight-start\n    state.status = Status.EndGame;\n    state.winner = winner;\n    state.tie = tie;\n    // tell UrTurn that the room is finished, which let's UrTurn index rooms properly and display\n    // finished rooms to players correctly\n    return { state, finished: true };\n    // highlight-end\n  }\n\n  // highlight-start\n  // Set the plr to move to the next player\n  state.plrMoveIndex = (plrMoveIndex + 1) % 2;\n  return { state };\n  // highlight-end\n}\n")))),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("p",{parentName:"admonition"},"That's it! Now try adding two players and play around with it.")),(0,r.kt)("h2",{id:"whats-next"},"What's Next?"),(0,r.kt)("p",null,"You can ",(0,r.kt)("a",{parentName:"p",href:"/docs/Getting-Started/deploying-your-game"},(0,r.kt)("strong",{parentName:"a"},"deploy"))," your game to UrTurn in a couple of minutes! Immediately play with random people, or create private rooms and play with close friends!"),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("p",{parentName:"admonition"},"Notice that you didn't have to worry about:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"How to communicate between two players"),(0,r.kt)("li",{parentName:"ul"},"How to manage room creation, matchmaking, and scaling")),(0,r.kt)("p",{parentName:"admonition"},"With Urturn you get to focus on your game logic, without worrying about ",(0,r.kt)("strong",{parentName:"p"},"unnecessary infrastructure")," problems.")),(0,r.kt)("p",null,"If you think you are up for the challenge. Try making a more advanced game, ",(0,r.kt)("a",{parentName:"p",href:"/docs/Getting-Started/chess"},"Chess"),", or start making your own ",(0,r.kt)("a",{parentName:"p",href:"/docs/Getting-Started/runner-init"},"game"),"!"))}c.isMDXComponent=!0},8529:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/final-tictactoe-f5ab2ae80855af189be107bf75ab9208.gif"}}]);