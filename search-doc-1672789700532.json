[{"title":"First Game Jam (08/06/2022)","type":0,"sectionRef":"#","url":"/blog/First Game Jam","content":"","keywords":""},{"title":"Update‚Äã","type":1,"pageTitle":"First Game Jam (08/06/2022)","url":"/blog/First Game Jam#update","content":"Congratulations to the winners!! 1st Place - @ReverendPazu , 272nd Place - @azzy made rock paper scissors (no bugs edition)3rd place - @Flakezzz1 made connect 4 "},{"title":"Prompt‚Äã","type":1,"pageTitle":"First Game Jam (08/06/2022)","url":"/blog/First Game Jam#prompt","content":"Every Great Journey has a beginning. In a few days, Urturn will embark on a new beginning, our first game jam, and we are so excited to see what y‚Äôall create. Making games has always been personal for me; it has exposed me to the amazing world of programming has given me freedoms and abilities that I never fathomed. I want to share those experiences with you. Therefore, it is my pleasure to welcome you to our very first Urturn Game Jam! - Kevin Theme: Ur First "},{"title":"Semantle Battle Tournament (11/5/2022)","type":0,"sectionRef":"#","url":"/blog/Semantle Battle Tournament","content":"","keywords":""},{"title":"What‚Äã","type":1,"pageTitle":"Semantle Battle Tournament (11/5/2022)","url":"/blog/Semantle Battle Tournament#what","content":"Semantle Battle is a spin off of the original semantle game where two players pick secrets for one another to guess. The player who guesses the secret first wins.Play it with a friend here to prepare before the tournament. "},{"title":"When‚Äã","type":1,"pageTitle":"Semantle Battle Tournament (11/5/2022)","url":"/blog/Semantle Battle Tournament#when","content":"Tournament will be hosted Saturday 11/5/2022 2:00 PM PST.RSVP in the Discord as soon as possible, we will cap the number of participants. "},{"title":"Where‚Äã","type":1,"pageTitle":"Semantle Battle Tournament (11/5/2022)","url":"/blog/Semantle Battle Tournament#where","content":"Always Discord. "},{"title":"How‚Äã","type":1,"pageTitle":"Semantle Battle Tournament (11/5/2022)","url":"/blog/Semantle Battle Tournament#how","content":"Entry is Free. Tournament Structure‚Äã We will auto generate a random bracket with every player that RSVPs in the Discord.All games will be screen shared (each player will share their screen in two separate channels) to ensure no cheating.Each player starts out on their own and are their own team leader (i.e. each team will have 1 player at the first round).When a team wins, the two teams combine and the new team leader is the team leader of the winning team. Eventually the last Semantle Battle will be between two large teams.Only the team leader can type in guesses. Teams will not have access to the other teams voice chat/text channel. Prizes‚Äã Team leader of last team standing gets the only ultimate tournament winner discord role.Players on the winning team will get a tournament winner discord role. Rules‚Äã No Cheating of any form (you will be disqualified immediately, banned from the discord server, and the UrTurn platform - seriously don't ruin the fun of others).The winner is chosen based on the player in this order of priority: player who guessed the word firstclosest word index-wise (e.g. 99th word in nearest list is better than 70th word in nearest list)closest word similarity score-wise Each game you have 30 seconds to provide your secret and 5 minutes to guess the other player's secret. At the end of the 5 minutes, a winner is chosen. "},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Get the latest on new features, awesome games, upcoming events, and technology from the UrTurn team.","keywords":""},{"title":"Game Jam (11/26-27/2022)","type":0,"sectionRef":"#","url":"/blog/Word Game Jam","content":"","keywords":""},{"title":"Update‚Äã","type":1,"pageTitle":"Game Jam (11/26-27/2022)","url":"/blog/Word Game Jam#update","content":"Congratulations to the winners!! 1st Place - @jvat Bananagrams2nd Place - @azzy Hangman3rd place - @hannahmarie Song Guesser "},{"title":"Prizes‚Äã","type":1,"pageTitle":"Game Jam (11/26-27/2022)","url":"/blog/Word Game Jam#prizes","content":"1st $50 Gift Card2nd $25 Gift Card3rd $10 Gift Card info You get to choose the Gift Card (Amazon, Steam, Home Depot?). We may ask you to choose another retailer for any reason (e.g. inappropriate, or Roblox gift card). All winners will have a role added to their discord name. "},{"title":"Prompt‚Äã","type":1,"pageTitle":"Game Jam (11/26-27/2022)","url":"/blog/Word Game Jam#prompt","content":"Words. We use them to communicate. We use them to make jokes with silly puns. We tell stories with them to inspire others, to express ourselves. We arrange them in many ways. Sometimes we use them to provide odd abstract prompts for a game jam on a thanksgiving weekend. What are words? Do they mean the same to you as they do to me? What does it mean to understand - to stand under? - Kevin Theme: Words caution Themes do NOT need to be strictly followed, but be prepared to answer the question &quot;How does this relate to the theme?&quot; "},{"title":"When‚Äã","type":1,"pageTitle":"Game Jam (11/26-27/2022)","url":"/blog/Word Game Jam#when","content":"info 11/26/2022 - 11/27/2022 Join discord for specific times. "},{"title":"Where‚Äã","type":1,"pageTitle":"Game Jam (11/26-27/2022)","url":"/blog/Word Game Jam#where","content":"Always Discord. "},{"title":"Advanced Guides","type":0,"sectionRef":"#","url":"/docs/Advanced","content":"Advanced Guides This section is not going to be very structured but will cover several specific use cases: üìÑÔ∏è Custom Game Page Fully customize your game page üìÑÔ∏è Approaching Breaking Changes What to do when you need to introduce a breaking change üìÑÔ∏è Saving Player Data Save player data across rooms! üìÑÔ∏è Typescript Support üöß Coming Soon... üìÑÔ∏è Server-Side Move Timers it's ur turn, but ur taking too long to move! üìÑÔ∏è Monetization Let's get this bread üí∞ üìÑÔ∏è Self Hosting UrTurn Instructions to self host all of UrTurn in case we get kidnapped by Roblox, sent to antarctica, and forced build Roblox games.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs","content":"","keywords":""},{"title":"What UrTurn Is‚Äã","type":1,"pageTitle":"Introduction","url":"/docs#what-urturn-is","content":"UrTurn is a game platform that hosts and handles all infrastructure for your game: networking, multiplayer, matchmaking, and data storage. The framework lets you modify game state of a room in a transactional and event-based manner. Just define how to modify game states on each event, and that's it (no infrastructure headaches, no worrying about scale again).  "},{"title":"Perfect for‚Äã","type":1,"pageTitle":"Introduction","url":"/docs#perfect-for","content":"Turn based games (e.g. any board game)Word games with several updates per secondGames that can be represented as state machinesMonetizing Single Player Games (coming soon) "},{"title":"Opinionated Where It Matters‚Äã","type":1,"pageTitle":"Introduction","url":"/docs#opinionated-where-it-matters","content":"We are obsessed with a great developer experience. This means we abstract away complicated infrastructure in scalable and best practice way that just makes sense. "},{"title":"What UrTurn is NOT‚Äã","type":1,"pageTitle":"Introduction","url":"/docs#what-urturn-is-not","content":"info UrTurn is NOT opinionated on the frontend of your game or your dev environment. Continue to use your favorite frontend web technologies (e.g. vanilla HTML5, ReactJS, PhaserIO, BabylonJS, etc.), and hook into UrTurn using the @urturn/client.Continue to use your favorite IDE for coding with JavaScript, and continue using your favorite dev tools and open source libraries. info UrTurn's framework is NOT closed source. We want developers to have as much control over the look and feel of their game, and post them anywhere, host them anywhere.If you wanted to self host UrTurn, you can because all code is available on GitHub. See self-hosting guide. caution UrTurn is NOT a real time gaming framework Despite this limitation, there is a set of rich potential use cases for it that can make exciting and fun games. See the front page.Join the early release wait list on discord, so we can notify you when we add support. caution UrTurn is NOT fully stable yet. It is in Alpha. This means that there may be some breaking changes. We will try to avoid them as much as possible, and will always notify developers in our discord. "},{"title":"Custom Game Page","type":0,"sectionRef":"#","url":"/docs/Advanced/custom-game-page","content":"Custom Game Page Customize the game page posting on UrTurn. The default look is often not enough to fully sell your game to players. caution This work is in progress. Join the early release wait list on discord. Ideally, you will be able to modify and use any game data on the front page for a much more unique and richer experience for your players.","keywords":""},{"title":"Monetization","type":0,"sectionRef":"#","url":"/docs/Advanced/monetization","content":"Monetization Here are several use cases we support: Handling a user purchase in a transactional way to modify the roomState or update persisted player dataRequest a payout to your personal bank account caution This work is planned. Join discord to provide more details on your use case.","keywords":""},{"title":"Saving Player Data","type":0,"sectionRef":"#","url":"/docs/Advanced/persisting-player-data","content":"Saving Player Data caution Gamification is important. Players want to be able to track their progress across games. The implementation of this work will allow you to modify player data in a transactional manner while modifying your room state. You will be able to do several things: Players can have an inventory of items across different roomsScore and potentially rating in the future of a PlayerAny other things you can think of.Limit will be 15MB worth of data! This work is planned. Join discord to provide more details on your use case.","keywords":""},{"title":"Approaching Breaking Changes","type":0,"sectionRef":"#","url":"/docs/Advanced/room-versioning","content":"Approaching Breaking Changes There are times when you need to upgrade your game code in a way that will break existing rooms. For players this may not be a fun experience. We want to give you the tools to provide your players with the best experience possible. caution We are still in brainstorming mode. Join discord to provide more details on your use case.","keywords":""},{"title":"Server-Side Move Timers","type":0,"sectionRef":"#","url":"/docs/Advanced/timer-triggers","content":"","keywords":""},{"title":"Workaround‚Äã","type":1,"pageTitle":"Server-Side Move Timers","url":"/docs/Advanced/timer-triggers#workaround","content":"Current workaround recommended is to have clients use the clock synced time functions client.now() and make a client.makeMove() request whenever clients detect the match is over. Clients will race to notify the server, which is okay because you can fail all other clients that called client.makeMove() by adding simple validation that checks if the timeout is already handled. This is currently used in the Semantle Battle game. "},{"title":"Self Hosting UrTurn","type":0,"sectionRef":"#","url":"/docs/Advanced/self-hosting","content":"","keywords":""},{"title":"Self hosting instructions‚Äã","type":1,"pageTitle":"Self Hosting UrTurn","url":"/docs/Advanced/self-hosting#self-hosting-instructions","content":"caution This work is planned. Join discord to provide more details on your use case. We guarantee instructions are posted in the case we become insolvent. "},{"title":"Typescript Support","type":0,"sectionRef":"#","url":"/docs/Advanced/typescript-support","content":"Typescript Support caution Not supported yet. Join the early release wait list on discord, so we can notify you when we add support.","keywords":""},{"title":"@UrTurn/client","type":0,"sectionRef":"#","url":"/docs/API/client","content":"","keywords":""},{"title":"Fields‚Äã","type":1,"pageTitle":"@UrTurn/client","url":"/docs/API/client#fields","content":""},{"title":"client.events EventEmitter‚Äã","type":1,"pageTitle":"@UrTurn/client","url":"/docs/API/client#clientevents-eventemitter","content":"client.events.on('onStateChanged', (newRoomState: RoomState) =&gt; {})‚Äã Calls the callback anytime the current RoomState changes for the room "},{"title":"Methods‚Äã","type":1,"pageTitle":"@UrTurn/client","url":"/docs/API/client#methods","content":""},{"title":"client.makeMove(move: Move)‚Äã","type":1,"pageTitle":"@UrTurn/client","url":"/docs/API/client#clientmakemovemove-move","content":"Move is any JSON serializable objectreturns Promise&lt;MoveResult&gt; if the move is accepted "},{"title":"client.getLocalPlayer()‚Äã","type":1,"pageTitle":"@UrTurn/client","url":"/docs/API/client#clientgetlocalplayer","content":"returns the local player object info You can tell if the local player is a spectator or a regular player if they are not in the players list. This will help you display a different view if the game is in spectator mode. "},{"title":"client.getRoomState()‚Äã","type":1,"pageTitle":"@UrTurn/client","url":"/docs/API/client#clientgetroomstate","content":"returns the current RoomState "},{"title":"client.now()‚Äã","type":1,"pageTitle":"@UrTurn/client","url":"/docs/API/client#clientnow","content":"returns the milliseconds from epoch (equivalent to Date.now()) tip client.now() is clocked synced with our servers. You should rely on this for timing mechanisms over the built in Date.now() because the local user clock can be off by seconds or even minutes! "},{"title":"Types‚Äã","type":1,"pageTitle":"@UrTurn/client","url":"/docs/API/client#types","content":""},{"title":"MoveResult‚Äã","type":1,"pageTitle":"@UrTurn/client","url":"/docs/API/client#moveresult","content":"error Error object if an error occurredundefined if no error ocurred success true if successful (no error ocurred)undefined if an error occurred Example: // successful move { &quot;success&quot;: true } // error occurred { &quot;error&quot;: { &quot;name&quot;: &quot;invalid move&quot;, &quot;message&quot;: &quot;player billy made an invalid move, it wasn't their turn } }  "},{"title":"Room Functions","type":0,"sectionRef":"#","url":"/docs/API/room-functions","content":"","keywords":""},{"title":"Flow‚Äã","type":1,"pageTitle":"Room Functions","url":"/docs/API/room-functions#flow","content":"All functions follow this flow when handling an event: "},{"title":"Pure Functions‚Äã","type":1,"pageTitle":"Room Functions","url":"/docs/API/room-functions#pure-functions","content":"All room functions are pure: return values are identical for identical arguments.has no side effects within the function itself. caution Avoid modifying any variables scoped outside of the function, as there is no guarantee those modifications will last within the same room and may affect other rooms. Using global constants is fine, or loading in constants from an external file. caution Common mistake is to forget returning the roomStateResult. Make sure you are returning any resulting state, otherwise the changes will not be applied! "},{"title":"ACID Transactions‚Äã","type":1,"pageTitle":"Room Functions","url":"/docs/API/room-functions#acid-transactions","content":"All room functions are ACID transactions: Atomic: either all updates returned are fully completed or completely fail. This is important for handling functions like player purchases; you don‚Äôt want a player to be charged Urbux and fail to give them their desired item. This prevents data corruption of your roomState.Consistent: your functions will never be given partial data or corrupt data; they will always get the latest roomState for the room.Isolated: you are guaranteed that functions for a given room are handled one by one. No two functions can corrupt each other.Durable: successful room functions are guaranteed to survive system failure. Even if UrTurn goes down, or has partial outages, your data for each room should survive. "},{"title":"onRoomStart Required‚Äã","type":1,"pageTitle":"Room Functions","url":"/docs/API/room-functions#onroomstart-required","content":"onRoomStart = (roomState: RoomState) =&gt; RoomStateResult  Use this function to initialize your board game state.Runs when the room is first initialized, as triggered by these actions: When a private room is created (player clicks Create Private Room).When a room is created for the matchmaking queue (player clicks Play). Fails on error (when user clicks play or attempts start a game, it will show them an error and will not start the game).Returns the RoomStateResult. "},{"title":"onPlayerJoin Required‚Äã","type":1,"pageTitle":"Room Functions","url":"/docs/API/room-functions#onplayerjoin-required","content":"onPlayerJoin = (player: Player, roomState: RoomState) =&gt; RoomStateResult  Runs when a player joins the room, including when the room is created (i.e. the player clicks Play or Create Private Room).Fails on error (when user clicks play and joins a game, it will show them an error snackbar).If roomState.joinable is false then it is guaranteed that no player will be added to the room and onPlayerJoin will never be called for a player.Returns the RoomStateResult. "},{"title":"onPlayerQuit Required‚Äã","type":1,"pageTitle":"Room Functions","url":"/docs/API/room-functions#onplayerquit-required","content":"onPlayerQuit = (player: Player, roomState: RoomState) =&gt; RoomStateResult  Runs when a player quits the game.A player can quit the game by manually clicking the quit button.Only players in the room, can quit the room (e.g. we can't call onPlayerQuit with a player not known to the room).Returns the RoomStateResult. caution onPlayerQuit is forced. Even if an error occurs in your code, we will force our own logic to be executed (e.g. removing player from the roomState.players list). This may put the roomState for the room in a corrupt state depending on your code, so you should avoid erroring in this function. "},{"title":"onPlayerMove Required‚Äã","type":1,"pageTitle":"Room Functions","url":"/docs/API/room-functions#onplayermove-required","content":"onPlayerMove = (player: Player, move: Move, roomState: RoomState) =&gt; RoomStateResult  Runs when a player moves (i.e. when client.makeMove() is called with the move JSON object).Fails on error. The client triggering this will receive your error as a return value.Returns the RoomStateResult. info If a player is trying to do something impossible/against game rules, then it is recommended to throw an error, so you can handle it in the game frontend. "},{"title":"@UrTurn/runner","type":0,"sectionRef":"#","url":"/docs/API/runner","content":"","keywords":""},{"title":"Commands‚Äã","type":1,"pageTitle":"@UrTurn/runner","url":"/docs/API/runner#commands","content":"$ npx @urturn/runner -h Usage: runner [options] [command] Options: -v, --version output the current version -h, --help display help for command Commands: init [options] &lt;destination&gt; initialize a new UrTurn Game start [options] starts the local runner serving the console and backend help [command] display help for command  caution NOT all commands are printed above. You should run runner -h locally to know what is available. It is possible you have a different version. "},{"title":"Types","type":0,"sectionRef":"#","url":"/docs/API/types","content":"","keywords":""},{"title":"RoomState‚Äã","type":1,"pageTitle":"Types","url":"/docs/API/types#roomstate","content":"RoomState object is provided to each room function, and will have the fields: roomState.joinable: bool default: trueIf true, new users will be able to join this game instance.If false, new users can not join this game instance via a private room or matchmaking. roomState.finished: bool default: falseUsed by UrTurn to index each room properly for matchmaking and displaying user stats.If true: no new room functions will be called for the room.roomState.joinable is forced to be false. If false, the game will show in the &quot;Active Games&quot; list for players. roomState.state: JSON object default: {}Can hold any valid JSON object, and is designed for you to put any data you want to make your game logic possible.If you try to store non JSON serializable values like functions, they will be parsed out.Max size is 15mb. roomState.players: Player[], read-only default: []UrTurn manages this field and will add a player object to the list before calling onPlayerJoin and removes the player object from the list before calling onPlayerQuit.Sorted in the order players joined the room (earliest player first with later players further in the array). roomState.version: int, read-only default: 0UrTurn manages this field and increments the version by 1 every time a function successfully modifies it. roomState.roomStartContext: RoomStartContext, read-only default: {}Provides crucial information on context of how this room was createdFor example, private rooms will set roomState.roomStartContext.private = true. roomState.logger: RoomLogger, read-only, room functions only Logger object used to log out metadata or message.This helps us correlate logs in the same function call. "},{"title":"RoomStartContext‚Äã","type":1,"pageTitle":"Types","url":"/docs/API/types#roomstartcontext","content":"RoomStartContext is an object that is defined by how the player created the room. This is useful whenever you want your game to behave differently depending on how the room started. RoomStartContext.private bool true if the room is private (other players will not be able to access the room without the link)false if the room is public. This means players can queue up and join this room. // Example 1. Default (User clicks `Play`) roomState.roomStartContext = { private: false } // Example 2. Private Rooms (User clicks `Create Private Room`) roomState.roomStartContext = { private: true }  caution It is not possible to have custom RoomStartContext. We are still brainstorming on a good solution for this. Please join our discord to tell us about your use case. "},{"title":"RoomLogger‚Äã","type":1,"pageTitle":"Types","url":"/docs/API/types#roomlogger","content":"RoomLogger is an object to be used to log any metadata or message RoomLogger.info (...args) =&gt; void Logs at the info level RoomLogger.warn (...args) =&gt; void Logs at the warn level RoomLogger.error (...args) =&gt; void Logs at the error level caution Viewing production logs is not supported yet. Provide details on your use case at our discord. "},{"title":"RoomStateResult‚Äã","type":1,"pageTitle":"Types","url":"/docs/API/types#roomstateresult","content":"RoomStateResult object is returned by every exported function. All fields are optional (omitting a field will make no edits to the current value). This object can have all the non read-only fields as the RoomState. "},{"title":"Player‚Äã","type":1,"pageTitle":"Types","url":"/docs/API/types#player","content":"player.id: string Unique identification string for the player.No two players will have the same id.Player's cannot ever change their id. player.username: string Unique amongst any player at a point in time.Player may change their username. { // example &quot;id&quot;: &quot;90123018123dsf&quot;, &quot;username&quot;: &quot;billy&quot; }  "},{"title":"Move‚Äã","type":1,"pageTitle":"Types","url":"/docs/API/types#move","content":"Any JSON serializable object. Example: { &quot;y&quot;: 1, &quot;nested&quot;: {&quot;field&quot;: &quot;hello world&quot;} // ... any other field }  "},{"title":"Deploying your game","type":0,"sectionRef":"#","url":"/docs/Getting-Started/deploying-your-game","content":"","keywords":""},{"title":"Manual Deployment‚Äã","type":1,"pageTitle":"Deploying your game","url":"/docs/Getting-Started/deploying-your-game#manual-deployment","content":"Go to UrTurn Dev Console.Click create game or edit an existing gameFill in the required fieldsProvide the commit SHA that you want to deploy. Usually you can get the commit SHA with this command, which gets the latest commit for your published branch. # In the directory of your game repository $ git log -n 1 --pretty=format:&quot;%H&quot; origin/published 9cf2a6c11accb1d49d1b488985eb1df37c753d4a  Click Create or Update, and try playing your game! Updates should be instant. "},{"title":"Continuous Deployment‚Äã","type":1,"pageTitle":"Deploying your game","url":"/docs/Getting-Started/deploying-your-game#continuous-deployment","content":"caution Not supported yet. Join the early release wait list on discord, so we can notify you when we add support. "},{"title":"Build Artifact Spec‚Äã","type":1,"pageTitle":"Deploying your game","url":"/docs/Getting-Started/deploying-your-game#build-artifact-spec","content":"The commit that is deployed in production needs to have the format: game ‚îÇ index.js # rollup should transpile all of you javascript files and dependencies into this file | thumbnail.png # not required, but if not provided UrTurn will display a stock image for your game | ‚îî‚îÄ‚îÄ‚îÄfrontend/build ‚îÇ ‚îÇ # all the built html, css, javascript files go here  Here is an example for TicTacToe. tip This is easily achieved using GitHub Actions. Steps in getting started should automatically generate the correct actions for you. "},{"title":"Generate a Game","type":0,"sectionRef":"#","url":"/docs/Getting-Started/runner-init","content":"","keywords":""},{"title":"Create Game‚Äã","type":1,"pageTitle":"Generate a Game","url":"/docs/Getting-Started/runner-init#create-game","content":"npx @urturn/runner init my-game # generates new game files cd my-game npm run dev # run the game locally  "},{"title":"File/Folder structure‚Äã","type":1,"pageTitle":"Generate a Game","url":"/docs/Getting-Started/runner-init#filefolder-structure","content":"game ‚îÇ package.json # npm package specification for dependencies for your room functions (includes @urturn/runner for local development) ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ.github/workflows # contains important GitHub actions that create a build artifact for UrTurn to use ‚îÇ ‚îî‚îÄ‚îÄ‚îÄsrc ‚îÇ ‚îÇ main.js # room functions (e.g. onRoomStart, onPlayerMove, etc.) ‚îÇ ‚îî‚îÄ‚îÄ‚îÄfrontend # holds all the files related to your game frontend ‚îÇ package.json # npm package specification for dependencies on your frontend (includes @urturn/client) ‚îÇ ...your frontend files  "},{"title":"GitHub Actions in .github/workflows‚Äã","type":1,"pageTitle":"Generate a Game","url":"/docs/Getting-Started/runner-init#github-actions-in-githubworkflows","content":"tip No GitHub Actions experience needed! We've already done the hard work for you. When you ran npx @urturn/runner init my-game, the correct github actions were created for you. When you push to main branch of your repo on GitHub, the actions will automatically create the correct Artifact structure on the published branch, which you will use to deploy to production. "},{"title":"Chess Tutorial","type":0,"sectionRef":"#","url":"/docs/Getting-Started/chess","content":"","keywords":""},{"title":"What you are making‚Äã","type":1,"pageTitle":"Chess Tutorial","url":"/docs/Getting-Started/chess#what-you-are-making","content":"You can play the final version here.  caution This is an advanced tutorial so it will move fast. We expect you to have a basic understanding what UrTurn is. "},{"title":"Setup‚Äã","type":1,"pageTitle":"Chess Tutorial","url":"/docs/Getting-Started/chess#setup","content":"Generate the chess tutorial locally: npx @urturn/runner init --tutorial chess # answer prompts cd chess  The UI is provided for you. Your goal is to implement the underlying logic (room functions) which determine the resulting state after any event (e.g. player move, joins, etc.). "},{"title":"Defining Initial State‚Äã","type":1,"pageTitle":"Chess Tutorial","url":"/docs/Getting-Started/chess#defining-initial-state","content":"We've already defined the initial state in onRoomStart. These values are understood and acted upon by the frontend provided. { &quot;state&quot;: { // simple map of plrId to the color they are playing as &quot;white&quot; or &quot;black&quot; &quot;plrIdToColor&quot;: {}, // string representation of the board https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation &quot;fen&quot;: null, // player JSON object that won the game &quot;winner&quot;: null, // the string representation of a location on the board of the // final position of the last moved piece (e.g. &quot;e4&quot;) &quot;lastMovedSquare&quot;: null, }, }  Your goal is to define the other 3 functions onPlayerJoin, onPlayerMove, onPlayerQuit for a fully functioning chess game. Fortunately, the fundamental chess logic has been implemented for us with the chess.js package. "},{"title":"Players joining‚Äã","type":1,"pageTitle":"Chess Tutorial","url":"/docs/Getting-Started/chess#players-joining","content":"TODOonPlayerJoin Solution src/main.js function onPlayerJoin(player, roomState) { // TODO: implement what to do when player joins game return {} }  "},{"title":"Players quitting‚Äã","type":1,"pageTitle":"Chess Tutorial","url":"/docs/Getting-Started/chess#players-quitting","content":"TODOonPlayerQuit Solution src/main.js function onPlayerQuit() { // TODO: handle when player quits the game before it finishes return {}; }  "},{"title":"Players making chess moves‚Äã","type":1,"pageTitle":"Chess Tutorial","url":"/docs/Getting-Started/chess#players-making-chess-moves","content":"TODOonPlayerMove Solution src/main.js function onPlayerMove() { // TODO: handle when player quits the game before it finishes return {}; }  tip That's it! Now we have a chess game that properly handles validation of player moves, and updating the state based on player moves. "},{"title":"What's Next?‚Äã","type":1,"pageTitle":"Chess Tutorial","url":"/docs/Getting-Started/chess#whats-next","content":"You can deploy your game to UrTurn in a couple of minutes! Immediately play with random people, or create private rooms and play with close friends! "},{"title":"Stretch goal‚Äã","type":1,"pageTitle":"Chess Tutorial","url":"/docs/Getting-Started/chess#stretch-goal","content":"Try implementing the classic chess move timers with client.now(). The idea is that clients initiate a client.makeMove() call when they detect the game to be finished and the onPlayerMove function validates this request. caution Read more about server side timers, which will make this much easier. caution Tutorial with chess move timers is coming soon. Join our Discord to learn more about it. "},{"title":"Concepts","type":0,"sectionRef":"#","url":"/docs/Introduction/Concepts","content":"","keywords":""},{"title":"Basic architecture‚Äã","type":1,"pageTitle":"Concepts","url":"/docs/Introduction/Concepts#basic-architecture","content":"This diagram shows 4 systems. You write code for the web frontend and the room functions. We write code for the runner and client so you don't have to.  tip All infrastructure shown is managed, scaled, and operated by UrTurn. For you, it will feel like your frontend is seamlessly communicating directly with your room functions. caution The user is able to control the game frontend.This means critical game logic should always be in your room functions (e.g. validation of user data, handling transition of state, etc.), which is managed by our cloud servers. "},{"title":"Room‚Äã","type":1,"pageTitle":"Concepts","url":"/docs/Introduction/Concepts#room","content":"Rooms are instances of games.Rooms will have an associated RoomState to track the current state of the room.Players create new rooms whenever they click play on your game. UrTurn will automatically place players together in a room if it is public.private rooms are created by players when they click create private room. You can handle private rooms differently than public rooms (see roomStartContext) in your room functions.For example, you might want players to be able to control various game settings or rules in a private room. If a user accidentally closes their browser, they may reopen it to view the room again (exception: see disconnectTimeout) "},{"title":"Game‚Äã","type":1,"pageTitle":"Concepts","url":"/docs/Introduction/Concepts#game","content":"Each game can have a thumbnail, title, description, and specific code related to it that is run whenever a room is created. "},{"title":"Automatic Disconnect Handling‚Äã","type":1,"pageTitle":"Concepts","url":"/docs/Introduction/Concepts#automatic-disconnect-handling","content":"When a user is disconnected from a public room, the user will be automatically kicked from the room with onPlayerQuit after 30 seconds.This does not apply to private rooms! Meaning, even if a player disconnects from a private room indefinitely, they will not be forced out of it. "},{"title":"Flow of a Simple Game","type":0,"sectionRef":"#","url":"/docs/Introduction/Flow-Of-Simple-Game","content":"","keywords":""},{"title":"TicTacToe‚Äã","type":1,"pageTitle":"Flow of a Simple Game","url":"/docs/Introduction/Flow-Of-Simple-Game#tictactoe","content":"Let's walk through a simple TicTacToe game that you made: "},{"title":"1. Player Billy clicks Play‚Äã","type":1,"pageTitle":"Flow of a Simple Game","url":"/docs/Introduction/Flow-Of-Simple-Game#1-player-billy-clicks-play","content":" UrTurn calls your room function implementation of onRoomStart to initialize the room state. Initial roomStateonRoomStart code { &quot;joinable&quot;: true, // defaults to true, (when set to false, UrTurn prevents any new players from joining the room) &quot;finished&quot;: false, // defaults to false, (when set to true, UrTurn prevents any new moves from being made) &quot;state&quot;: { // this field can be any JSON object that you define. This was provided in the roomStateResult by the room function above. &quot;status&quot;: &quot;preGame&quot;, &quot;board&quot;: [ [ null, null, null ], [ null, null, null ], [ null, null, null ] ], &quot;winner&quot;: null, }, &quot;version&quot;: 0, // metadata controlled by UrTurn; as each new `RoomState` gets created, this gets incremented by 1 &quot;players&quot;: [], // metadata controlled by UrTurn; when a player joins the room, they are added here to the list. When they quit the room, they are removed. }  UrTurn calls onPlayerJoin function with Billy player object and the previous roomState created earlier. roomState resultonPlayerJoin Code { &quot;joinable&quot;: true, // room should still let players join because there are not enough players to play tictactoe yet &quot;finished&quot;: false, &quot;state&quot;: { &quot;status&quot;: &quot;preGame&quot;, &quot;board&quot;: [ [ null, null, null ], [ null, null, null ], [ null, null, null ] ], &quot;winner&quot;: null }, &quot;version&quot;: 1, // incremented because our room function successfully modified the state &quot;players&quot;: [ // new player is in the player list { &quot;id&quot;: &quot;id_0&quot;, &quot;username&quot;: &quot;billy&quot; } ] }  Updates are propagated to clients by sending an event to client.events.on('stateChanged') so your game frontend can update the view for the player.  "},{"title":"2. Player Sarah clicks Play‚Äã","type":1,"pageTitle":"Flow of a Simple Game","url":"/docs/Introduction/Flow-Of-Simple-Game#2-player-sarah-clicks-play","content":"UrTurn matchmaking system puts Sarah to the same room as Billy. The same function onPlayerJoin is called with Sarah player object and the previous roomState, which produces the result (changes are highlighted): { &quot;joinable&quot;: false, // no longer joinable as we have enough players! &quot;finished&quot;: false, &quot;state&quot;: { &quot;status&quot;: &quot;inGame&quot;, // game is now in game and we can start playing! &quot;board&quot;: [ [ null, null, null ], [ null, null, null ], [ null, null, null ] ], &quot;winner&quot;: null, &quot;plrMoveIndex&quot;: 0 }, &quot;version&quot;: 2, &quot;players&quot;: [ { &quot;id&quot;: &quot;id_0&quot;, &quot;username&quot;: &quot;billy&quot; }, { // new player &quot;sarah&quot;, added by UrTurn runner &quot;id&quot;: &quot;id_1&quot;, &quot;username&quot;: &quot;sarah&quot; } ] }  Updates are propagated to all clients: Sarah's browserBilly's browser "},{"title":"3. Billy puts X in top left corner‚Äã","type":1,"pageTitle":"Flow of a Simple Game","url":"/docs/Introduction/Flow-Of-Simple-Game#3-billy-puts-x-in-top-left-corner","content":"Billy's browserSarah's browser Your frontend calls client.makeMove({ x: 0, y: 0 }) whenever it detected billy clicking a button on the board info The client.makeMove function takes any move JSON! UrTurn calls onPlayerMove function to handle the arbitrary move: roomState resultonPlayerMove code Resulting roomState (changes are highlighted): { &quot;joinable&quot;: false, &quot;finished&quot;: false, &quot;state&quot;: { &quot;status&quot;: &quot;inGame&quot;, &quot;board&quot;: [ [ &quot;X&quot;, // Billy‚Äôs move! null, null ], [ null, null, null ], [ null, null, null ] ], &quot;winner&quot;: null, &quot;plrMoveIndex&quot;: 1 // next move is Sarah‚Äôs }, &quot;version&quot;: 3, &quot;players&quot;: [ { &quot;id&quot;: &quot;id_0&quot;, &quot;username&quot;: &quot;billy&quot; }, { &quot;id&quot;: &quot;id_1&quot;, &quot;username&quot;: &quot;sarah&quot; } ] }  "},{"title":"4. Room functions are pure functions‚Äã","type":1,"pageTitle":"Flow of a Simple Game","url":"/docs/Introduction/Flow-Of-Simple-Game#4-room-functions-are-pure-functions","content":"Notice how all of the implemented room functions (onRoomStart, onPlayerJoin, etc.) takes in the current roomState and several other arguments and returns a roomStateResult. Data should feel like a natural flow of transformations throughout time: This makes it easier to understand, debug, and test your room functions. More on pure functions. "},{"title":"Getting the hang of it?‚Äã","type":1,"pageTitle":"Flow of a Simple Game","url":"/docs/Introduction/Flow-Of-Simple-Game#getting-the-hang-of-it","content":"tip You just write code for how state changes based on various room events - player joins, quits, makes move, etc. UrTurn takes care of the rest. Try implementing the entire TicTacToe game and deploying it to production so anyone can play it! "},{"title":"TicTacToe Tutorial","type":0,"sectionRef":"#","url":"/docs/Getting-Started/tictactoe","content":"","keywords":""},{"title":"What you are making‚Äã","type":1,"pageTitle":"TicTacToe Tutorial","url":"/docs/Getting-Started/tictactoe#what-you-are-making","content":" tip Play the final version. Playing the game will help you envision what the underlying logic will look like. Ask yourself: How do you define what happens when a player moves?How can you tell if a player won the game? "},{"title":"Setup‚Äã","type":1,"pageTitle":"TicTacToe Tutorial","url":"/docs/Getting-Started/tictactoe#setup","content":"Generate the tictactoe tutorial locally: npx @urturn/runner init --tutorial first-game # answer prompts cd first-game  The UI is provided for you. Your goal is to implement the underlying logic (room functions) which determine the resulting state after any event (e.g. player move, joins, etc.). "},{"title":"File/Folder structure‚Äã","type":1,"pageTitle":"TicTacToe Tutorial","url":"/docs/Getting-Started/tictactoe#filefolder-structure","content":"game ‚îî‚îÄ‚îÄ‚îÄsrc # room logic goes here ‚îÇ ‚îÇ main.js # room functions (e.g. onRoomStart, onPlayerMove, etc.) | | util.js # helper functions (e.g. evaluateBoard) ‚îÇ ‚îî‚îÄ‚îÄ‚îÄfrontend # Tictactoe UI code lives here | ‚îÇ ...frontend files | ...other files # not important for this tutorial  info There are several // TODO: statements scattered across the files, src/main.js and src/util.js, to help guide you. "},{"title":"Defining how state changes‚Äã","type":1,"pageTitle":"TicTacToe Tutorial","url":"/docs/Getting-Started/tictactoe#defining-how-state-changes","content":"Start up the game and play around. npm run dev  info The runner will immediately open a new window. You will see a console that let's you easily debug/inspect the global state of your game. You will also notice that if you add, remove a player or try to make a move on the tictactoe board, none of the state will change. So let's fix that! "},{"title":"Initializing state‚Äã","type":1,"pageTitle":"TicTacToe Tutorial","url":"/docs/Getting-Started/tictactoe#initializing-state","content":"We need to define what the initial state of the room looks like. All state related to a room is held within the RoomState. We modify this object by returning the RoomStateResult. tip The runner will automatically hot reload changes when make changes and save info Now, modify the onRoomStart function. Implement the TODO statements in onRoomStart in the file src/main.js, and then check your work with the solution. TODOonRoomStart Solution src/main.js function onRoomStart() { /** * TODO: define the fields: * state.status (hint: use Status enum) * state.plrIdToPlrMark * state.plrMoveIndex * state.board * state.winner */ const state = {}; return { state }; }  tip You should see your modifications to the initial state show up in the console! "},{"title":"Players joining‚Äã","type":1,"pageTitle":"TicTacToe Tutorial","url":"/docs/Getting-Started/tictactoe#players-joining","content":"info Modify the onPlayerJoin function to handle when a player joins. Implement the TODO statements in onPlayerJoin, and then check your work with the solution. tip While implementing, try adding players. Try adding 3 players to see what happens. TODOonPlayerJoin Solution src/main.js function onPlayerJoin(player, roomState) { const { players, state } = roomState; if (players.length === 2) { // enough players to play the game // TODO: modify state to start the game return { // TODO: tell UrTurn to NOT allow anymore players in this room // TODO: return the modified state }; } // still waiting on another player so make no modifications return {}; }  "},{"title":"Players leaving‚Äã","type":1,"pageTitle":"TicTacToe Tutorial","url":"/docs/Getting-Started/tictactoe#players-leaving","content":"info Modify the onPlayerQuit function to handle when a player quits. Implement the TODO statements in onPlayerQuit, and then check your work with the solution. tip While implementing, try adding players and then removing them. Does the console show the state you expect? TODOonPlayerQuit Solution src/main.js function onPlayerQuit(player, roomState) { const { state, players } = roomState; state.status = Status.EndGame; if (players.length === 1) { // TODO: when a player quits and there is another player, we should default the winner to // be the remaining player return { // TODO: properly tell UrTurn the room is over // (hint: modify finished, state fields) }; } return { // TODO: when a player quits and there was no other player, there is no winner but we should // properly tell UrTurn the room is over // (hint: modify finished) }; }  "},{"title":"Helper functions‚Äã","type":1,"pageTitle":"TicTacToe Tutorial","url":"/docs/Getting-Started/tictactoe#helper-functions","content":"Before we approach handling player moves, let's implement the helper function evaluateBoard for determining if the game is finished and who won. info Implement the TODO statements in evaluateBoard, and then check your work with the solution. Read the doc string for the function to understand what we should return! caution There are many ways to implement tictactoe evaluation logic, so don't be discouraged if your implementation doesn't look exactly like ours. TODOevaluateBoard Solution src/util.js export const evaluateBoard = (board, plrIdToPlrMark, players) =&gt; { /** * TODO: check for a winner (hint: make sure the mark is not null) * - check rows * - check columns * - check diagonals */ // TODO: check for tie and return correct result // TODO: return default not finished };  "},{"title":"Player Moves‚Äã","type":1,"pageTitle":"TicTacToe Tutorial","url":"/docs/Getting-Started/tictactoe#player-moves","content":"info Implement the TODO statements in onPlayerMove, and then check your work with the solution. TODOonPlayerMove Solution src/main.js function onPlayerMove(player, move, roomState) { const { state, players, logger } = roomState; const { plrMoveIndex, plrIdToPlrMark } = state; const { x, y } = move; // TODO: validate player move and throw sensible error messages // 1. what if a player tries to make a move when the game hasn't started? // 2. what if a player makes a move and its not their turn? // 3. what if a player makes a move on the board where there was already a mark? // TODO: mark the board // check if the game is finished const result = evaluateBoard(state.board, plrIdToPlrMark, players); if (result?.finished) { // TODO: handle different cases when game is finished, using the values calculated from // evaluateBoard() call // hint: winner is Player type (not string) return { // TODO: include state modifications so UrTurn updates the state // TODO: tell UrTurn that the room is finished, which lets UrTurn display the room correctly }; } // TODO: Set the plr to move to the next player (hint: update state.plrMoveIndex) return { state }; }  tip That's it! Now try adding two players and play around with it. "},{"title":"What's Next?‚Äã","type":1,"pageTitle":"TicTacToe Tutorial","url":"/docs/Getting-Started/tictactoe#whats-next","content":"You can deploy your game to UrTurn in a couple of minutes! Immediately play with random people, or create private rooms and play with close friends! tip Notice that you didn't have to worry about: How to communicate between two playersHow to manage room creation, matchmaking, and scaling With Urturn you get to focus on your game logic, without worrying about unnecessary infrastructure problems. If you think you are up for the challenge. Try making a more advanced game, Chess, or start making your own game! "}]